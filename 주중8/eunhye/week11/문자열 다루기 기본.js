//9점🦊

function solution(s) {
  let answer = true;
  const len = s.length;
  if (len !== 4 && len !== 6) answer = false;
  s.split("").forEach((el) => {
    if (isNaN(el)) answer = false;
  });
  return answer;
}

//isNaN(el)이 아니라 !Number(el)로 접근했는데, 자꾸 17번~20번 케이스, 30번 케이스, 아무튼 여기저기서 통과가 안 되어서 접근방식을 바꿨다.
//NaN인지 확인하기 위한 접근법이었으니 isNaN(el)이 더 깔끔한 것 같다.

// 테스트 1 〉	통과 (0.05ms, 33.4MB)
// 테스트 2 〉	통과 (0.05ms, 33.4MB)
// 테스트 3 〉	통과 (0.05ms, 33.4MB)
// 테스트 4 〉	통과 (0.05ms, 33.4MB)
// 테스트 5 〉	통과 (0.05ms, 33.4MB)
// 테스트 6 〉	통과 (0.05ms, 33.5MB)
// 테스트 7 〉	통과 (0.05ms, 33.5MB)
// 테스트 8 〉	통과 (0.05ms, 33.4MB)
// 테스트 9 〉	통과 (0.07ms, 33.4MB)
// 테스트 10 〉	통과 (0.05ms, 33.4MB)
// 테스트 11 〉	통과 (0.05ms, 33.4MB)
// 테스트 12 〉	통과 (0.05ms, 33.4MB)
// 테스트 13 〉	통과 (0.05ms, 33.4MB)
// 테스트 14 〉	통과 (0.05ms, 33.4MB)
// 테스트 15 〉	통과 (0.05ms, 33.4MB)
// 테스트 16 〉	통과 (0.05ms, 33.4MB)
// 테스트 17 〉	통과 (0.05ms, 33.4MB)
// 테스트 18 〉	통과 (0.05ms, 33.4MB)
// 테스트 19 〉	통과 (0.05ms, 33.4MB)
// 테스트 20 〉	통과 (0.05ms, 33.4MB)
// 테스트 21 〉	통과 (0.05ms, 33.4MB)
// 테스트 22 〉	통과 (0.05ms, 33.5MB)
// 테스트 23 〉	통과 (0.05ms, 33.4MB)
// 테스트 24 〉	통과 (0.05ms, 33.5MB)
// 테스트 25 〉	통과 (0.05ms, 33.4MB)
// 테스트 26 〉	통과 (0.05ms, 33.5MB)
// 테스트 27 〉	통과 (0.05ms, 33.5MB)
// 테스트 28 〉	통과 (0.05ms, 33.4MB)
// 테스트 29 〉	통과 (0.05ms, 33.4MB)
// 테스트 30 〉	통과 (0.05ms, 33.5MB)
