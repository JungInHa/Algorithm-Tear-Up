
// 테스트 1 〉	통과 (0.05ms, 33.4MB)
// 테스트 2 〉	통과 (0.05ms, 33.5MB)
// 테스트 3 〉	통과 (0.04ms, 33.5MB)
// 테스트 4 〉	통과 (0.05ms, 33.6MB)
// 테스트 5 〉	통과 (0.04ms, 33.3MB)
// 테스트 6 〉	통과 (0.05ms, 33.4MB)
// 테스트 7 〉	통과 (0.05ms, 33.3MB)
// 테스트 8 〉	통과 (0.07ms, 33.6MB)
// 테스트 9 〉	통과 (0.13ms, 33.5MB)
// 테스트 10 〉	통과 (0.07ms, 33.5MB)
// 테스트 11 〉	통과 (0.06ms, 33.5MB)
// 테스트 12 〉	통과 (0.16ms, 33.5MB)
// 테스트 13 〉	통과 (0.14ms, 33.5MB)
// 테스트 14 〉	통과 (0.13ms, 33.6MB)
// 테스트 15 〉	통과 (0.14ms, 33.5MB)
// 테스트 16 〉	통과 (0.14ms, 33.5MB)
// 테스트 17 〉	통과 (0.13ms, 33.5MB)
// 테스트 18 〉	통과 (0.13ms, 33.4MB)
// 효율성  테스트
// 테스트 1 〉	통과 (5.38ms, 37.8MB)
// 테스트 2 〉	통과 (5.71ms, 37.9MB)

// 7점

function solution(s){
    // s : ()로 이루어진 문자열
    
    // ( 만나면 + 1
    // ) 만나면 - 1
    
    // 최종적으로 0이면 true 아니면 false;
    
    // 그렇게 간단한 문제가 아니였다.
    
    let stack = [];
    
    for (let i = 0; i < s.length; i++){
        if (s[i] === '('){
            stack.push(s[i]);
        }
        else if (s[i] === ')' && stack.length > 0){
            stack.pop();
        }else{
            return false;
        }
        
    }
    
    return stack.length === 0 ? true : false;
}