function solution(n) {
  const divisors = [];
  for (let i = 1; i <= Math.sqrt(n); i++) {
    if (n % i === 0) {
      divisors.push(i);
      if (n / i != i) divisors.push(n / i);
    }
  }

  return divisors.filter((el) => el % 2 !== 0).length;
}

//덩어리로 나눈다고 생각했을때
//짝수 덩어리로 나누어 떨어지면 1씩 증가하거나 감소할 수 없다.
//덩어리로 나누어 떨어지는 수 = 약수
//약수가 홀수인 것의 갯수가 정답
//7점
//5분 내
// 정확성  테스트
// 테스트 1 〉	통과 (0.06ms, 33.5MB)
// 테스트 2 〉	통과 (0.14ms, 33.6MB)
// 테스트 3 〉	통과 (0.16ms, 33.5MB)
// 테스트 4 〉	통과 (0.23ms, 33.6MB)
// 테스트 5 〉	통과 (0.05ms, 33.5MB)
// 테스트 6 〉	통과 (0.07ms, 33.5MB)
// 테스트 7 〉	통과 (0.16ms, 33.5MB)
// 테스트 8 〉	통과 (0.09ms, 33.5MB)
// 테스트 9 〉	통과 (0.06ms, 33.6MB)
// 테스트 10 〉	통과 (0.20ms, 33.5MB)
// 테스트 11 〉	통과 (0.14ms, 33.6MB)
// 테스트 12 〉	통과 (0.14ms, 33.5MB)
// 테스트 13 〉	통과 (0.14ms, 33.5MB)
// 테스트 14 〉	통과 (0.14ms, 33.5MB)
// 테스트 15 〉	통과 (0.05ms, 33.6MB)
// 테스트 16 〉	통과 (0.06ms, 33.5MB)
// 테스트 17 〉	통과 (0.05ms, 33.5MB)
// 테스트 18 〉	통과 (0.05ms, 33.6MB)
// 효율성  테스트
// 테스트 1 〉	통과 (0.14ms, 33.5MB)
// 테스트 2 〉	통과 (0.16ms, 33.3MB)
// 테스트 3 〉	통과 (0.15ms, 33.4MB)
// 테스트 4 〉	통과 (0.18ms, 33.1MB)
// 테스트 5 〉	통과 (0.18ms, 33.3MB)
// 테스트 6 〉	통과 (0.14ms, 33.4MB)
