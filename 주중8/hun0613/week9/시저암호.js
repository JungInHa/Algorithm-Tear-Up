function solution(s, n) {
    
    // 일단 s가 대문자인지 소문자인지 봐야한다.
    // 대문자라면 아스키코드는 65이상 90이하일 것이고,
    // 소문자라면 97이상 122이하일 것이다.
    
    // 하나하나 다봐야되네...?
    // 그럼 split으로 s를 나눌건데, 만약 split[i]가 공백이라면 continue
    
    // 굳이 for문으로 할 필요없이 map을 쓰면 됨.
    // map을 써야되니까 s를 하나하나 나눠서 배열로 만들어주긴 해야됨
    // 공백이 아닌 원소에 대해서 codeCharAt에 아스키코드 + n 한걸 다시 문자로 변환
    // 오케이
    
    
    // s를 나눠서 조건에 맞게 각 원소를 바꿔줄건데
    const answer = s.split('').map(el => {
        // 공백이 아닐때는 바꿔줘야지
        if (el !== ' '){
            // 일단 ASCII라는 변수에 el을 아스키코드로 변환해서 n만큼 민 값을 할당
            let ASCII = el.charCodeAt() + n;
            
            // 그 ASCII 값에 n을 더하기 전, 그니까 처음 상태가 90보다 작다는 것은 대문자 A~Z 중 하나라는 소리
            // 근데 그런 요소가 n을 더한게 90이 넘어간다? -> 대문자이기때문에 다시 A부터 시작하기위해 26을 빼준다.(알파벳 개수)
            
            // 그게 아니라, 아스키코드에 n을 더한게 122가 넘어간다? 소문자이면서 범위를 초과한 애들
            // 마찬가지로 26을 빼줘서 소문자 범위에서 돌아가게 해준다.
            if ((ASCII - n <= 90 && ASCII > 90) || ASCII > 122) ASCII -= 26;
            
            // 위에서 걸러져서 온 애들을 다시 문자로 변환
            return String.fromCharCode(ASCII)
        }
        // 공백이라면? 그래도 공백은 살려줘야 되니까
        else {
            // 그냥 그대로 반환해줘라
            return el;
        }
    })
    
    // 그걸 모두 합쳐서 문자열로 리턴
    return answer.join('');
}