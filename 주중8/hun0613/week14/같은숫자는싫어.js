

// 테스트 1 〉	통과 (0.05ms, 33.4MB)
// 테스트 2 〉	통과 (0.06ms, 33.5MB)
// 테스트 3 〉	통과 (0.06ms, 33.4MB)
// 테스트 4 〉	통과 (0.06ms, 33.5MB)
// 테스트 5 〉	통과 (0.06ms, 33.4MB)
// 테스트 6 〉	통과 (0.06ms, 33.5MB)
// 테스트 7 〉	통과 (0.06ms, 33.5MB)
// 테스트 8 〉	통과 (0.06ms, 33.4MB)
// 테스트 9 〉	통과 (0.06ms, 33.6MB)
// 테스트 10 〉	통과 (0.06ms, 33.5MB)
// 테스트 11 〉	통과 (0.06ms, 33.4MB)
// 테스트 12 〉	통과 (0.06ms, 33.4MB)
// 테스트 13 〉	통과 (0.06ms, 33.4MB)
// 테스트 14 〉	통과 (0.06ms, 33.4MB)
// 테스트 15 〉	통과 (0.06ms, 33.4MB)
// 테스트 16 〉	통과 (0.06ms, 33.6MB)
// 테스트 17 〉	통과 (0.04ms, 33.4MB)
// 효율성  테스트
// 테스트 1 〉	통과 (49.53ms, 83.1MB)
// 테스트 2 〉	통과 (51.31ms, 83.1MB)
// 테스트 3 〉	통과 (47.81ms, 82.8MB)
// 테스트 4 〉	통과 (49.58ms, 83MB)

function solution(arr)
{

    
    // arr : 0~9까지의 숫자로 이루어져있는 배열
    // 연속되어있는 숫자는 하나만 남기고 삭제
    // 순서는 유지
    
    // 하나씩 새 배열에 넣어줄건데 만약 배열에 이미 원소가 있으면 아무것도 하지마
    
    let answer = [];
    
    arr.forEach(el => {
        if(answer[answer.length - 1] !== el) answer.push(el)  
    })
    
    return answer;
}